# A B T
# ---+-
# 0 0 E
# 0 1 V
# 1 0 R
# 1 1 L

# A B C
# ---+-
# 0 0 E
# 0 1 B
# 1 0 Y
# 1 1 R

: main
#jump patch
v8 := 0x12
v9 := 0xc

: str0
i := zeros
save v7

:next str1
i := pt
save vb

:org 0x20c
hires

: _main
clear

i := border
v0 := 63

v1 := 0

: border_again
sprite v0 v1 8

v1 += 8
if v1 != 64
then jump border_again

i := zeros
load v7
v8 := 0x80

: _main_clear
i := bottle0
i += v8
save v7
v8 += 8
if v8 != 0x78
then jump _main_clear

:const SEEDM 0x00
:const SEEDL 0xc0
:const LVLA 19
:const LVLB 20
#:const SEEDM 0x5c
#:const SEEDL 0x1b
#:const LVLA 1
#:const LVLB 2
#:const SEEDM 0x2d
#:const SEEDL 0x00
#:const LVLA 20
#:const LVLB 20

:alias LFSRM v0
:alias SPARE v0
:alias P0    v1
:alias LFSRL v2
:alias COUNT v3
:alias VIRI  v4
:alias LVL   v5
:alias POS   v6
:alias TYPE  v7
:alias MSK   v8
:alias END   v9
:alias YPOS  va
:alias FOUR  vb
:alias EIGHTEEN vc
:alias FOURTEEN vd

:alias FLAG  vf

i := dots
v0 := 1
v2 := 2

: _main_dots
sprite v0 v2 1
v0 += 65
v2 += 3
sprite v0 v2 1
v0 -= 57
v2 -= 3

if v0 != 65
then jump _main_dots

v0 := 1
v2 += 8
if v2 != 66
then jump _main_dots

LFSRM := random 0x7f
LFSRL := random 0xff

if LFSRM != 0
then jump good_seed

if LFSRL == 0
then LFSRL := 1

: good_seed
v8 := 0
v7 := 55
v1 := LFSRM
:call draw_seed
v1 := LFSRL
:call draw_seed

# generate 128 random numbers
FOUR := 4
COUNT := 0xc0 # count-up to 255
i := rand

: _randgen
save LFSRL

LFSRM <<= LFSRM
LFSRL <<= LFSRL
LFSRM |= FLAG
MSK := 0x80
MSK &= LFSRM
FLAG := 0x80
FLAG &= LFSRL
MSK += FLAG
MSK <<= MSK
LFSRL |= FLAG

COUNT += 1
i += FOUR
if COUNT != 255
then jump _randgen

# save the extra 0xFF marker byte
save COUNT

FOURTEEN := 14
EIGHTEEN := 18

vf := 255
delay := vf

: repeat0
vf := delay
if vf != 253
then jump repeat0

YPOS := 2
VIRI := LVLA
END := 0x6d
:call gen_bottle

vf := delay
v8 := 253
v8 -= vf
i := str0
bcd v8

vf := 255
delay := vf

: repeat1
vf := delay
if vf != 253
then jump repeat1

YPOS := 61
VIRI := LVLB
END := 0xe5
:call gen_bottle

vf := delay
v8 := 253
v8 -= vf
i := str1
bcd v8

v8 := 4
v3 := 65

i := str0
load v2

i := hex v0
#sprite v3 v8 5
v3 += 5
i := hex v1
#sprite v3 v8 5
v3 += 5
i := hex v2
#sprite v3 v8 5

v3 += 10
i := str1
load v2

i := hex v0
#sprite v3 v8 5
v3 += 5
i := hex v1
#sprite v3 v8 5
v3 += 5
i := hex v2
#sprite v3 v8 5

vf := 255
delay := vf

: repeat2
vf := delay
if vf != 253
then jump repeat2

# vd unused
:next dots
v5 := 0x88
v6 := 0x88
v8 := 77
vc := 125

: _again
v9 := 59
vb := -8
:call drawc

v5 += 0x80
v8 ^= vc
v9 := 0
vb := 8
:call drawc

if v6 == 0xc0
then v6 := 0x40

v5 += 0x78
v8 -= 4
v8 ^= vc
if v8 != 129
then jump _again

vf := delay
v8 := 253
v8 -= vf

i := str0
bcd v8

v8 := 4
v3 := 105

i := str0
load v2

i := hex v0
#sprite v3 v8 5
v3 += 5
i := hex v1
#sprite v3 v8 5
v3 += 5
i := hex v2
#sprite v3 v8 5

vf := 255
delay := vf

: repeat3
vf := delay
if vf != 253
then jump repeat3

# clear top three rows
i := bottle0
load vb
i := bottle0t3
save vb
i := bottle1t3
save vb

vc := 0x68 # offset
vd := 0x40 # end
:call splat

vc := 0xb8 # offset
vd := 0x88 # end
:call splat

v0 := 0
v1 := 0
i := guard0
save v1

i := guard1
v0 := 255
save v0

vf := delay
v8 := 253
v8 -= vf

i := str0
bcd v8

v8 := 58
v3 := 105

i := str0
load v2

i := hex v0
#sprite v3 v8 5
v3 += 5
i := hex v1
#sprite v3 v8 5
v3 += 5
i := hex v2
#sprite v3 v8 5

vf := key
jump _main

# va unused
: drawc
i := zeros
load v4
v7 := 0x80

: _another
i := bottle0
i += v5
load v0
v5 += 1

v0 <<= v0
if v0 == 0
then jump _skip

if v0 == 2
then jump _virus0

v1 |= v7
if v0 == 4
then jump _virus1

i := virus2

: _virus0r
v4 |= v7

: _virus1r
v3 |= v7
v2 |= v7

sprite v8 v9 5

: _skip
v9 += vb
v7 >>= v7
if v7 != 0
then jump _another

v0 := v4
i := bottle0
i += v6
save v3
v6 += 4

return

: _virus0
i := virus0
jump _virus0r

: _virus1
i := virus1
jump _virus1r

: gen_bottle
i := ltbl
i += VIRI
load v0
LVL := v0
MSK := 0x7f
LFSRL := 0

VIRI += 1
VIRI <<= VIRI
VIRI <<= VIRI
TYPE := 1

: _gen_bottle_loop
# pick level in bottle
i := rand
i += LFSRL
load LFSRM
LFSRL += 2

POS := LFSRM
POS &= MSK
# clamp biasing to blottom of bottle
POS -= LVL
if FLAG == 0
then POS += LVL
P0 := POS
POS =- END
POS -= 1

: _gen_bottle_retry
POS += 1
i := bottle_10
i += POS
load v0

if v0 == 0
then jump _gen_bottle_found_empty

: _gen_bottle_try_again
if POS != END
then jump _gen_bottle_retry

LVL -= P0
END -= P0
P0 := LVL
P0 <<= P0

: _gen_bottle_mask
if P0 > MSK
then jump _gen_bottle_loop

MSK >>= MSK
jump _gen_bottle_mask

: _gen_bottle_found_empty
# fail fast next time if neighbors too dense
:next b10000000
SPARE := 0x80
save SPARE

i := bottle
i += POS
load v0
COUNT := v0

FLAG := 6
FLAG &= POS
if FLAG == 4
then jump _gen_bottle_l

if FLAG == 6
then jump _gen_bottle_r

i += FOURTEEN
load v0
COUNT |= v0

i += FOUR
: _gen_bottle_r_ret
load v0
COUNT |= v0

i += FOURTEEN
: _gen_bottle_l_ret
load v0
COUNT |= v0

# remove msb in case empty was marked dense
COUNT <<= COUNT
if COUNT == 14
then jump _gen_bottle_try_again

COUNT >>= COUNT
SPARE := TYPE

: _gen_bottle_find_type
SPARE <<= SPARE
if SPARE == 8
then SPARE := 1

TYPE := SPARE
TYPE &= COUNT
if TYPE != 0
then jump _gen_bottle_find_type

i := bottle_10
i += POS
save SPARE

TYPE := SPARE
VIRI -= 1
i := b10000000
#sprite VIRI YPOS 1

if VIRI == 0
then return

jump _gen_bottle_loop

: _gen_bottle_l
i += FOURTEEN
load v0
COUNT |= v0

i += EIGHTEEN
jump _gen_bottle_l_ret

: _gen_bottle_r
i += EIGHTEEN
jump _gen_bottle_r_ret

: splat
i := bottle0
i += vc
load v3

i := bottle1
i += v4
save v3

i := bottle0_04
i += vc
load v3

i := bottle0
i += v4
save v3

if vc == vd
then return

v4 += 4
vc -= 8
jump splat

: draw_seed
v3 := 0xf
v3 &= v1
v1 >>= v1
v1 >>= v1
v1 >>= v1
v1 >>= v1
i := hex v1
#sprite v8 v7 5
v8 += 5
i := hex v3
#sprite v8 v7 5
v8 += 5
return

: ltbl
79 79 79 79 79 79 79
79 79 79 79 79 79 79
79 87 87 95 95 103 103

: virus0
0x40 0xE0 0xA0 0xE0
: virus1
0x40 0xA0 0xE0 0xA0
: virus2
0x40 0xA0 0xA0 0xA0 0x40

: border
#0x80 0x40 0x40 0x40 0x80 0x80 0x80 0x40
0x80 0x40 0x80 0x40 0x80 0x40 0x80 0x40

#:org 0
: rand

:org 0xfa # for outside space bottle logic
: bottle

:org 0x100
: bottle0

:org 0x104
: bottle0_04

:org 0x10a # for outside space bottle logic
: bottle_10

:org 0x110
: bottle0_10

:org 0x134
: bottle0t3

:org 0x142
: guard0

:org 0x178
: zeros

:org 0x1bf
: guard1

:org 0x1c0
: bottle1

:org 0x1f4
: bottle1t3

:org 0x1f8
: pt # patch target

#:monitor rand 256
:monitor bottle0 256
:monitor main 16
