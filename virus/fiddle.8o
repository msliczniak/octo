:alias LLCA v0
:alias LLCB v1
:alias LLT0 v2
:alias LLT1 v3

:alias LUCA v4
:alias LUCB v5
:alias LUT0 v6
:alias LUT1 v7

:alias LMSK v8 # left
:alias RMSK v9 # right
:alias EMSK va # empty
:alias COLOR vb

:alias FRAME vc
:alias POSX vd
:alias POSY ve
:alias FLAG vf

# MSB L 76543210 LSB R

# 0 1 T
# ---+-
# 0 0 E
# 0 1 V
# 1 0 R
# 1 1 L

# A B C
# ---+-
# 0 0 E
# 0 1 B
# 1 0 Y
# 1 1 R

: main
clear
hires

i := tower

v0 := 0
v1 := 8
v2 := 16
v3 := 24
v4 := 32
v5 := 40
v6 := 48
v7 := 56

v8 := 2
sprite v0 v8 15
sprite v1 v8 15
sprite v2 v8 15
sprite v3 v8 15
sprite v4 v8 15
sprite v5 v8 15
sprite v6 v8 15
sprite v7 v8 15

v8 += 18
sprite v0 v8 15
sprite v1 v8 15
sprite v2 v8 15
sprite v3 v8 15
sprite v4 v8 15
sprite v5 v8 15
sprite v6 v8 15
sprite v7 v8 15

v8 += 18
sprite v0 v8 9
sprite v1 v8 9
sprite v2 v8 9
sprite v3 v8 9
sprite v4 v8 9
sprite v5 v8 9
sprite v6 v8 9
sprite v7 v8 9

v0 += 64
v1 += 64
v2 += 64
v3 += 64
v4 += 64
v5 += 64
v6 += 64
v7 += 64

v8 := 17
sprite v0 v8 15
sprite v1 v8 15
sprite v2 v8 15
sprite v3 v8 15
sprite v4 v8 15
sprite v5 v8 15
sprite v6 v8 15
sprite v7 v8 15

v8 += 18
sprite v0 v8 15
sprite v1 v8 15
sprite v2 v8 15
sprite v3 v8 15
sprite v4 v8 15
sprite v5 v8 15
sprite v6 v8 15
sprite v7 v8 15

v8 += 18
sprite v0 v8 9
sprite v1 v8 9
sprite v2 v8 9
sprite v3 v8 9
sprite v4 v8 9
sprite v5 v8 9
sprite v6 v8 9
sprite v7 v8 9

POSX := 64
POSY := 16

:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one
POSX += 4
POSY := 16
:call draw_one

POSX := 64
POSY := 17

FRAME := 255
delay := FRAME

: repeat
vf := delay
if vf != FRAME
then jump 253

:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX += 4
:call run_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX += 4
:call cascade_one
POSX := 64

vf := delay
v8 := 253
v8 -= vf

i := str
bcd v8

v8 := 0
v3 := 64

i := str
load v2

i := bighex v0
sprite v3 v8 10
v3 += 9
i := bighex v1
sprite v3 v8 10
v3 += 9
i := bighex v2
sprite v3 v8 10

i := hex vf
v0 := 0
v8 := 59
sprite v0 v8 5

vf := key
jump main

: draw_one
i := board
i += POSX
load v3

EMSK := LLCA
EMSK |= LLCB

: _draw_one_loop
if EMSK == 0
then return

EMSK <<= EMSK
if FLAG == 0
then jump _draw_one_skip

LLCA <<= LLCA
if FLAG == 0
then jump _draw_one_blue

COLOR := 16
LLCB <<= LLCB
if FLAG != 0
then COLOR := 32

: _draw_one_type
LLT0 <<= LLT0
if FLAG == 0
then jump _draw_one_virus

LLT1 <<= LLT1
if FLAG == 0
then jump _draw_one_right

i := rpiecel
i += COLOR
sprite POSX POSY 6
POSY += 6
jump _draw_one_loop

: _draw_one_right
i := rpiecer
i += COLOR
sprite POSX POSY 4
POSY += 6
jump _draw_one_loop

: _draw_one_virus
LLT1 <<= LLT1
i := rpiecev
i += COLOR
sprite POSX POSY 5
POSY += 6
jump _draw_one_loop

: _draw_one_blue
COLOR := 0
LLCB <<= LLCB
jump _draw_one_type

: _draw_one_skip
LLCA <<= LLCA
LLCB <<= LLCB
LLT0 <<= LLT0
LLT1 <<= LLT1
POSY += 6
jump _draw_one_loop

: rpiecer
: rpiecel
0x00
0xE0 0x20 0xE0 0x40 0x40
: rpiecev
0x40 0xE0 0x20 0xE0 0x40 0x00 0x00 0x00 0x00
0

: ypiecer
: ypiecel
0x00
0xA0 0x60 0xA0 0x40 0x40
: ypiecev
0x40 0xA0 0x60 0xA0 0x40 0x00 0x00 0x00 0x00
0

: bpiecer
: bpiecel
0x00
0xE0 0x20 0xE0 0x40 0x40
: bpiecev
0x40 0xE0 0x20 0xE0 0x40 0x00 0x00 0x00 0x00
0

:org 0x800 # 02 00000000
jump cascade_one_end

:org 0x802 # 02 00000010
jump _left_cascade_00000010

:org 0x804 # 04 00000100
:org 0x808 # 02 00001000
:org 0x80a # 06 00001010
:org 0x810 # 02 00010000
:org 0x812 # 02 00010010
:org 0x814 # 12 00010100
:org 0x820 # 02 00100000
:org 0x822 # 02 00100010
:org 0x824 # 04 00100100
:org 0x828 # 02 00101000
:org 0x82a # 22 00101010
:org 0x840 # 02 01000000
:org 0x842 # 02 01000010
:org 0x844 # 04 01000100
:org 0x848 # 02 01001000
:org 0x84a # 06 01001010
:org 0x850 # 02 01010000
:org 0x852 # 02 01010010
:org 0x854 # 44 01010100
:org 0x880 # 02 10000000
:org 0x882 # 02 10000010
:org 0x884 # 04 10000100
:org 0x888 # 02 10001000
:org 0x88a # 06 10001010
:org 0x890 # 02 10010000
:org 0x892 # 02 10010010
:org 0x894 # 12 10010100
:org 0x8a0 # 02 10100000
:org 0x8a2 # 02 10100010
:org 0x8a4 # 04 10100100
:org 0x8a8 # 02 10101000
:org 0x8aa # 86 10101010

:org 0x900

jump0 0x800
jump0 0x800
jump0 0x800
jump0 0x800
jump right_cascade_one

:org 0xa00
return

:org 0xa0e
jump bbbbccc

:org 0xb00

: run_one
i := board
i += POSX
load v3

# short circuit
EMSK := LLCA
EMSK |= LLCB
if EMSK == 0
then return

:call runsr
:call runsy
:call runsb

v0 := LLT0
v1 := LLT1
i := board_02
i += POSX
save v1

return

: runsr
EMSK := LLCA
EMSK &= LLCB
COLOR := 0
EMSK <<= EMSK
jump0 0xa00

: runsy
EMSK := 0xff
EMSK ^= LLCB
EMSK &= LLCA
COLOR := 16
EMSK <<= EMSK
jump0 0xa00

: runsb
EMSK := 0xff
EMSK ^= LLCA
EMSK &= LLCB
COLOR := 32
EMSK <<= EMSK
jump0 0xa00

: cascade_one
i := board
i += POSX
load v7

#: repeat
#vf := delay
#if vf == FRAME
#then jump repeat
#FRAME -= 1

# short circuit - noting to drop
if LUT0 == 0
then return

# 1 => L
LMSK := LUT1
LMSK &= LUT0

# 0 => E
EMSK := LLT0
EMSK |= LLT1

# 1 => E taking capsules into account as well
RMSK := EMSK
RMSK <<= RMSK
RMSK &= LMSK
EMSK |= RMSK
RMSK := LMSK
RMSK >>= RMSK
EMSK |= RMSK
RMSK := 0xff
EMSK ^= RMSK

# 1 => R
RMSK ^= LUT1
RMSK &= LUT0

LMSK &= EMSK
RMSK &= EMSK
RMSK <<= RMSK

jump0 0x900

: cascade_one_end

i := board
i += POSX
save v7

return

: tower
:byte 0x00 0x88 0x00 0x00 0x00 0x00 0x00 0x88 0x00 0x00 0x00 0x00 0x00 0x88 0x00

: str
:byte 0 0 0
:monitor str 3

: right0
EMSK := 0b11000000
EMSK &= LUCA

if EMSK == 0b01000000 then
jump right0r

if EMSK == 0b10000000 then
jump right0r

: right0r
i := piece
sprite POSX POSY 3

LLCA |= EMSK
EMSK := 0b00111111
LUCA &= EMSK

EMSK := 0b10000000
LLT0 |= EMSK
EMSK := 0b01111111
LUT0 &= EMSK

return

: right5
EMSK := 0b00110000
EMSK &= LUCB

if EMSK == 0b00010000 then
jump right5r

if EMSK == 0b00100000 then
jump right5r

: right5r
i := piece
sprite POSX POSY 3

LLCB |= EMSK
EMSK := 0b11001111
LUCB &= EMSK

EMSK := 0b00000100
LLT0 |= EMSK
EMSK := 0b11111011
LUT0 &= EMSK

return

: right_cascade_one
if FLAG != 0 then
:call right0

POSY += 30
:call right5

POSY += 226
jump0 0x800

: left
EMSK := COLOR
FLAG := 16
i := piece


: left6
EMSK := 0b00001100
EMSK &= LUCB

if EMSK == 0b00000100 then
jump left6r

if EMSK == 0b00001000 then
jump left6r

: left6r
i := piece

RMSK := 0b00000011
RMSK &= LUCB

if RMSK == 0b00000001 then
jump left6rr

if RMSK == 0b00000010 then
jump left6rr

: left6rr
LMSK := 0
i += LMSK
sprite POSX POSY 9

LLCB |= EMSK
LLCB |= RMSK
EMSK := 0b11110000
LUCB &= EMSK

EMSK := 0b00000011
LLT0 |= EMSK
EMSK := 0b00000010
LLT1 |= EMSK
EMSK := 0b11111100
LUT0 &= EMSK
LUT1 &= EMSK

return

: board
:monitor board 128
:byte
0b00000000 0b00000000
: board_02
0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000

0b00000000 0b10000111 0b00000000 0b10000111
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b00000000 0b00000000 0b00000000
0b00000000 0b10000111 0b10000111 0b00000010

: vruns
:monitor vruns 64
:byte
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

: _left_cascade_00000010
POSY += 36

: _left_cascade_10
#COLOR := 0x00000011
:call left6

POSY -= 36
jump cascade_one_end

: bbbbccc
if FLAG == 0
then jump bbbbbccc

i := vruns
i += POSY
load v1

if v0 != COLOR
then jump bbbbbccc

v1 += 4
if v1 != POSX
then jump bbbbbccc

: bbbbbccc
POSY += 6
i := vruns
i += POSY
load v1

if v0 != COLOR
then jump bbbbbccc0

v1 += 4
if v1 != POSX
then jump bbbbbccc0

: bbbbbccc0
POSY += 6
i := vruns
i += POSY
load v1

if v0 != COLOR
then jump bbbbbccc1

v1 += 4
if v1 != POSX
then jump bbbbbccc1

: bbbbbccc1
POSY += 6
i := vruns
i += POSY
load v1

if v0 != COLOR
then jump bbbbbccc2

v1 += 4
if v1 != POSX
then jump bbbbbccc2

: bbbbbccc2
POSY -= 18

return

: piece
:byte 0xEE 0x22 0xEE 0x44 0x44 0x44 0xEE 0x22 0xEE
