#:breakpoint main_loop

: main
VE := 0
buzzer := VE

: main_loop
VE := 0
VD := 0

: loop_create
V1 := random 0x1f
if V1 > 17 then
V1 -= 17

i := c0
i += VE
load V0

if V0 == V1
then jump inc_create

VA := V0
V0 <<= V0
V0 <<= V0
VA += V0

V0 := V1
i := c0
i += VE
save V0

V1 <<= V1
V1 <<= V1
V0 += V1

i := s0
i += V0
load V4

V5 := V0
V6 := V1
V7 := V2
V8 := V3
V9 := V4

i := s0
i += VA
load V4

V0 ^= V5
V1 ^= V6
V2 ^= V7
V3 ^= V8
V4 ^= V9

i := e_
i += VD
save V4

: inc_create
if VE == 15
then jump done_create

VE += 1
VD += 7
jump loop_create

: done_create

VE := 30
delay := VE
:call redraw

i := iv
load V6

i := e0
save V6
i := e1
save V6
i := e2
save V6
i := e3
save V6
i := e4
save V6
i := e5
save V6
i := e6
save V6
i := e7
save V6
i := e8
save V6
i := e9
save V6
i := ea
save V6
i := eb
save V6
i := ec
save V6
i := ed
save V6
i := ee
save V6
i := ef
save V6

: retry
VE := delay
if VE != 0
then jump retry

:call redraw
jump main_loop

: redraw # proc

V0 := 0
V1 := 0
V2 := 0
i := e0
sprite V1 V0 14 #0

V2 += 14
i := e0
i += V2
V1 += 10
sprite V1 V0 14 #1

V2 += 14
i := e0
i += V2
V1 += 10
sprite V1 V0 14 #2

V2 += 14
i := e0
i += V2
V1 += 10
sprite V1 V0 14 #3

V2 := 14
i := e0
i += V2
V1 := 0
V0 += 14
sprite V1 V0 14 #4

V2 += 14
i := e0
i += V2
V1 += 10
sprite V1 V0 14 #5

V2 += 14
i := e0
i += V2
V1 += 10
sprite V1 V0 14 #6

V2 += 14
i := e0
i += V2
V1 += 10
sprite V1 V0 14 #7

return

# 5x5 symbols
: s0 # 1 = 2^0
0x1C 0x36 0x36 0x36 0x1C # bold rounded
: s1 # 2 = 2^1
0x00 0x0C 0x04 0x04 0x0E # miniscule
: s2 # 4 = 2^2
0x3E 0x02 0x3E 0x20 0x3E
: s3 # 8 = 2^3
0x3C 0x0E 0x3E 0x0E 0x3C # bold rounded
: s4 # 16 = 2^4
0x00 0x04 0x14 0x1E 0x04 # miniscule
: s5 # 32 = 2^5
0x1E 0x20 0x3E 0x02 0x3E
: s6 # 64 = 2^6
0x1E 0x18 0x3E 0x3A 0x1E # bold rounded
: s7 # 128 = 2^7
0x00 0x1E 0x02 0x04 0x08 # miniscule
: s8 # 256 = 2^8
0x1E 0x12 0x3E 0x22 0x3E
: s9 # 512 = 2^9
0x3E 0x2E 0x3E 0x0E 0x0E # bold
: sa # 1K = 2^10
0x00 0x0C 0x12 0x1E 0x12
: sb # 2K = 2^11
0x3C 0x22 0x3E 0x22 0x3C
: sc # 4K = 2^12
0x1E 0x3E 0x38 0x3E 0x1E # bold rounded
: sd # 8K = 2^13
0x00 0x1C 0x12 0x12 0x1C # miniscule
: se # 16K = 2^14
0x3E 0x20 0x38 0x20 0x3E
: sf # 32K = 2^15
0x3E 0x38 0x3C 0x38 0x38 # bold
: sg # 64K = 2^16
0x00 0x2E 0x2A 0x2A 0x2E # miniscule
: ss # blank space
0 0 0 0 0
#: sx
#0x70 0xD8 0xD8 0xD8 0x70 # initial 0
#: sy
#0x00 0x60 0x20 0x20 0x70 # initial 1

#: zeros
#0 0 0 0 0 0 0

# xxd -b -c1 output.ch8 | awk 'i == 0 { i = 5; print "" } { i--; print $2 }' > font
# tr 0 X <font | tr 1 0 | tr X 1 > ifont
# sed 's/^1/0b1/' ifont
: i0
0b11100011
0b11001001
0b11001001
0b11001001
0b11100011

0b11111111
0b11110011
0b11111011
0b11111011
0b11110001

0b11000001
0b11111101
0b11000001
0b11011111
0b11000001

0b11000011
0b11110001
0b11000001
0b11110001
0b11000011

0b11111111
0b11111011
0b11101011
0b11100001
0b11111011

0b11100001
0b11011111
0b11000001
0b11111101
0b11000001

0b11100001
0b11100111
0b11000001
0b11000101
0b11100001

0b11111111
0b11100001
0b11111101
0b11111011
0b11110111

0b11100001
0b11101101
0b11000001
0b11011101
0b11000001

0b11000001
0b11010001
0b11000001
0b11110001
0b11110001

0b11111111
0b11110011
0b11101101
0b11100001
0b11101101

0b11000011
0b11011101
0b11000001
0b11011101
0b11000011

0b11100001
0b11000001
0b11000111
0b11000001
0b11100001

0b11111111
0b11100011
0b11101101
0b11101101
0b11100011

0b11000001
0b11011111
0b11000111
0b11011111
0b11000001

0b11000001
0b11000111
0b11000011
0b11000111
0b11000111

0b11111111
0b11010001
0b11010101
0b11010101
0b11010001

0b11111111
0b11111111
0b11111111
0b11111111
0b11111111


: iv # invert video
255 255 255 255 255 255 255

: c0
17 17 17 17
17 17 17 17
17 17 17 17
17 17 17 17

: e0
0
: e_
0 0 0 0 0 0
: e1
0 0 0 0 0 0 0
: e2
0 0 0 0 0 0 0
: e3
0 0 0 0 0 0 0
: e4
0 0 0 0 0 0 0
: e5
0 0 0 0 0 0 0
: e6
0 0 0 0 0 0 0
: e7
0 0 0 0 0 0 0
: e8
0 0 0 0 0 0 0
: e9
0 0 0 0 0 0 0
: ea
0 0 0 0 0 0 0
: eb
0 0 0 0 0 0 0
: ec
0 0 0 0 0 0 0
: ed
0 0 0 0 0 0 0
: ee
0 0 0 0 0 0 0
: ef
0 0 0 0 0 0 0

: rand0
0 0 0 0 0 0 0 0 0 0 0 0
: rand1
0 0 0 0 0 0 0 0 0 0 0 0

# I think I will stack them along the side instead
# score moves time
# 524097 131067 99:59
# 7ff41 1fffb 999:59

#>>> def foo(x):
#...     if x == 0:
#...             return 1
#...     return 2 * foo(x - 1) + x + 1
#... 
#>>> foo(0)
#1
#>>> foo(1)
#4
#>>> foo(2)
#11
#>>> 2 ** 16
#65536
#>>> foo(16)
#262125
#>>> hex(262125)
#'0x3ffed'
#>>> xrange(16)
#xrange(16)
#>>> range(16)
#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
#>>> sum(range(16))
#120
#>>> sum(xrange(16))
#120
#>>> map(foo, xrange(16))
#1, 4, 11, 26, 57, 120, 247, 502, 1013, 2036, 4083, 8178, 16369, 32752, 65519, 131054]
#>>> map(foo, xrange(17))
#[1, 4, 11, 26, 57, 120, 247, 502, 1013, 2036, 4083, 8178, 16369, 32752, 65519, 131054, 262125]
#>>> sum(map(foo, xrange(17)))
#524097
#>>> hex(524097)
#'0x7ff41'
#>>> sum(map(foo, xrange(16)))
#261972
#>>> hex(261972)
#'0x3ff54'

#$ cat score.py
#def score(x):
#	if x == 2:
#		return 4
#
#	return (score(x >> 1) + x) * 2

#>>> from score import score
#>>> hex(sum(map(score, (32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64,
# 32, 16, 8, 4, 2))))
#'0x1c0004'

#	a.push_back(0x0010);
#	a.push_back(0x0008);
#	a.push_back(0x0004);
#	a.push_back(0x0002);
#         
#	b.push_back(0x0020);
#	b.push_back(0x0040);
#	b.push_back(0x0080);
#	b.push_back(0x0100);
#         
#	c.push_back(0x1000);
#	c.push_back(0x0800);
#	c.push_back(0x0400);
#	c.push_back(0x0200);
#         
#	d.push_back(0x2000);
#	d.push_back(0x4000);
#	d.push_back(0x8000);
#	d.push_back(0x10000);
#
#	s = 0x1c0004;
#$ c++ -o score score.cc && ./score 
#65535
#0
#65533
#hex(65533)
#'0xfffd

#hex(sum(map(score, (65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 1
#28, 64, 32, 16, 8, 4))))
#'0x3c0000'

#	a.push_back(0x0020);
#	a.push_back(0x0010);
#	a.push_back(0x0008);
#	a.push_back(0x0004);
#         
#	b.push_back(0x0040);
#	b.push_back(0x0080);
#	b.push_back(0x0100);
#	b.push_back(0x1000);
#         
#	c.push_back(0x0800);
#	c.push_back(0x0400);
#	c.push_back(0x0200);
#	c.push_back(0x2000);
#         
#	d.push_back(0x4000);
#	d.push_back(0x8000);
#	d.push_back(0x10000);
#	d.push_back(0x20000);
#
#	s = 0x3c0000;
#
#$ c++ -o score score.cc && ./score 
#131068
#1
#131067
#>>> hex(131067)
#'0x1fffb'
